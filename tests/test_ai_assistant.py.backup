"""Tests for AI assistant functionality."""

import pytest
from pathlib import Path
from unittest.mock import Mock, patch

from claude_knowledge_catalyst.ai.ai_assistant import (
    AIAssistant, 
    AssistantResponse,
    ContentAnalysis,
    ImprovementSuggestion
)
from claude_knowledge_catalyst.core.metadata import KnowledgeMetadata


class TestAIAssistant:
    """Test suite for AIAssistant."""

    @pytest.fixture
    def assistant(self):
        """Create AI assistant instance."""
        return AIAssistant()

    @pytest.fixture
    def sample_metadata(self):
        """Sample metadata for testing."""
        return KnowledgeMetadata(
            title="Test Knowledge Item",
            type="prompt",
            tech=["python"],
            tags=["test", "automation"]
        )

    def test_assistant_initialization(self, assistant):
        """Test assistant initialization."""
        assert assistant is not None
        assert hasattr(assistant, 'analyze_content')
        assert hasattr(assistant, 'suggest_improvements')

    def test_content_analysis_basic(self, assistant):
        """Test basic content analysis."""
        content = """
        # Simple Python Function
        
        ```python
        def hello_world():
            print("Hello, World!")
        ```
        
        This is a basic Python function that prints a greeting.
        """
        
        # Mock the analysis to avoid external dependencies
        with patch.object(assistant, 'analyze_content') as mock_analyze:
            mock_analyze.return_value = ContentAnalysis(
                complexity="beginner",
                readability=0.8,
                completeness=0.7,
                technical_depth=0.5,
                suggested_improvements=["Add docstring", "Add type hints"]
            )
            
            result = assistant.analyze_content(content)
            
            assert result.complexity == "beginner"
            assert result.readability >= 0.5
            assert len(result.suggested_improvements) > 0

    def test_improvement_suggestions(self, assistant, sample_metadata):
        """Test improvement suggestions generation."""
        content = "Basic function without documentation"
        
        with patch.object(assistant, 'suggest_improvements') as mock_suggest:
            mock_suggest.return_value = [
                ImprovementSuggestion(
                    type="documentation",
                    description="Add comprehensive docstring",
                    priority="high",
                    example="def function():\n    \"\"\"Description here.\"\"\""
                )
            ]
            
            suggestions = assistant.suggest_improvements(content, sample_metadata)
            
            assert len(suggestions) > 0
            assert all(isinstance(s, ImprovementSuggestion) for s in suggestions)

    def test_assistant_response_creation(self):
        """Test AssistantResponse creation."""
        response = AssistantResponse(
            analysis=ContentAnalysis(
                complexity="intermediate",
                readability=0.75,
                completeness=0.8,
                technical_depth=0.6,
                suggested_improvements=["Add examples"]
            ),
            suggestions=[
                ImprovementSuggestion(
                    type="examples",
                    description="Add usage examples",
                    priority="medium",
                    example="Example code here"
                )
            ],
            confidence=0.85
        )
        
        assert response.confidence == 0.85
        assert response.analysis.complexity == "intermediate"
        assert len(response.suggestions) == 1

    def test_edge_cases(self, assistant):
        """Test assistant with edge cases."""
        edge_cases = [
            "",  # Empty content
            "   ",  # Whitespace only
            "Very short",  # Minimal content
            "🚀 Unicode content with emoji",  # Unicode handling
        ]
        
        for content in edge_cases:
            # Should handle gracefully without crashing
            try:
                with patch.object(assistant, 'analyze_content') as mock_analyze:
                    mock_analyze.return_value = ContentAnalysis(
                        complexity="unknown",
                        readability=0.5,
                        completeness=0.3,
                        technical_depth=0.1,
                        suggested_improvements=[]
                    )
                    
                    result = assistant.analyze_content(content)
                    assert isinstance(result, ContentAnalysis)
                    
            except Exception as e:
                pytest.fail(f"Assistant failed on edge case '{content}': {e}")

    def test_content_analysis_model(self):
        """Test ContentAnalysis model validation."""
        analysis = ContentAnalysis(
            complexity="advanced",
            readability=0.9,
            completeness=0.85,
            technical_depth=0.7,
            suggested_improvements=["Optimize performance"]
        )
        
        assert analysis.complexity == "advanced"
        assert 0 <= analysis.readability <= 1
        assert 0 <= analysis.completeness <= 1
        assert 0 <= analysis.technical_depth <= 1
        assert isinstance(analysis.suggested_improvements, list)

    def test_improvement_suggestion_model(self):
        """Test ImprovementSuggestion model validation."""
        suggestion = ImprovementSuggestion(
            type="performance",
            description="Optimize algorithm complexity",
            priority="high",
            example="Use dict instead of list for lookups"
        )
        
        assert suggestion.type == "performance"
        assert suggestion.priority in ["low", "medium", "high"]
        assert len(suggestion.description) > 0

    @pytest.mark.parametrize("content_type,expected_complexity", [
        ("def simple(): pass", "beginner"),
        ("class ComplexClass(metaclass=Meta): pass", "advanced"),
        ("# Simple note", "beginner"),
        ("Advanced algorithm with recursion and memoization", "intermediate"),
    ])
    def test_complexity_detection(self, assistant, content_type, expected_complexity):
        """Test complexity detection for different content types."""
        with patch.object(assistant, 'analyze_content') as mock_analyze:
            mock_analyze.return_value = ContentAnalysis(
                complexity=expected_complexity,
                readability=0.7,
                completeness=0.6,
                technical_depth=0.5,
                suggested_improvements=[]
            )
            
            result = assistant.analyze_content(content_type)
            assert result.complexity == expected_complexity

    def test_batch_analysis(self, assistant):
        """Test batch content analysis."""
        contents = [
            "First content item",
            "Second content item", 
            "Third content item"
        ]
        
        results = []
        for content in contents:
            with patch.object(assistant, 'analyze_content') as mock_analyze:
                mock_analyze.return_value = ContentAnalysis(
                    complexity="beginner",
                    readability=0.8,
                    completeness=0.7,
                    technical_depth=0.4,
                    suggested_improvements=[]
                )
                
                result = assistant.analyze_content(content)
                results.append(result)
        
        assert len(results) == len(contents)
        assert all(isinstance(r, ContentAnalysis) for r in results)


class TestAssistantIntegration:
    """Integration tests for AI assistant."""

    @pytest.fixture
    def assistant(self):
        """Create AI assistant instance."""
        return AIAssistant()

    def test_integration_with_metadata(self, assistant):
        """Test assistant integration with metadata system."""
        metadata = KnowledgeMetadata(
            title="Integration Test",
            type="code",
            tech=["python", "testing"],
            complexity="intermediate"
        )
        
        content = """
        def test_function():
            '''Test function for integration.'''
            return True
        """
        
        # Mock the assistant response for integration test
        with patch.object(assistant, 'suggest_improvements') as mock_suggest:
            mock_suggest.return_value = [
                ImprovementSuggestion(
                    type="testing",
                    description="Add unit tests",
                    priority="high",
                    example="pytest test cases"
                )
            ]
            
            suggestions = assistant.suggest_improvements(content, metadata)
            
            # Should consider metadata context
            assert len(suggestions) > 0
            assert any(s.type == "testing" for s in suggestions)

    def test_assistant_performance(self, assistant):
        """Test assistant performance with larger content."""
        # Create larger content
        large_content = "# Large Content\n\n" + "def function_{}(): pass\n".format("x" * 50) * 20
        
        with patch.object(assistant, 'analyze_content') as mock_analyze:
            mock_analyze.return_value = ContentAnalysis(
                complexity="intermediate",
                readability=0.7,
                completeness=0.6,
                technical_depth=0.5,
                suggested_improvements=["Add documentation"]
            )
            
            # Should handle large content efficiently
            result = assistant.analyze_content(large_content)
            assert isinstance(result, ContentAnalysis)

    def test_multilingual_support_preparation(self, assistant):
        """Test assistant preparation for multilingual content."""
        japanese_content = """
        # Pythonのテスト関数
        
        ```python
        def テスト関数():
            print("こんにちは、世界！")
        ```
        
        これは日本語のコメントを含むPython関数です。
        """
        
        with patch.object(assistant, 'analyze_content') as mock_analyze:
            mock_analyze.return_value = ContentAnalysis(
                complexity="beginner",
                readability=0.6,  # Might be lower due to mixed language
                completeness=0.7,
                technical_depth=0.4,
                suggested_improvements=["Consider English documentation"]
            )
            
            # Should handle multilingual content gracefully
            result = assistant.analyze_content(japanese_content)
            assert isinstance(result, ContentAnalysis)
            assert result.complexity is not None


class TestAssistantModels:
    """Test assistant data models."""

    def test_content_analysis_validation(self):
        """Test ContentAnalysis model validation."""
        # Valid data
        valid_analysis = ContentAnalysis(
            complexity="intermediate",
            readability=0.75,
            completeness=0.8,
            technical_depth=0.6,
            suggested_improvements=["Add tests", "Improve docs"]
        )
        
        assert valid_analysis.complexity == "intermediate"
        assert valid_analysis.readability == 0.75

    def test_improvement_suggestion_validation(self):
        """Test ImprovementSuggestion model validation."""
        # Valid suggestion
        valid_suggestion = ImprovementSuggestion(
            type="documentation",
            description="Add comprehensive docstrings",
            priority="high",
            example='def func():\n    """Docstring here."""'
        )
        
        assert valid_suggestion.type == "documentation"
        assert valid_suggestion.priority == "high"

    def test_assistant_response_validation(self):
        """Test AssistantResponse model validation."""
        analysis = ContentAnalysis(
            complexity="advanced",
            readability=0.85,
            completeness=0.9,
            technical_depth=0.8,
            suggested_improvements=["Optimize"]
        )
        
        suggestions = [
            ImprovementSuggestion(
                type="performance",
                description="Use caching",
                priority="medium",
                example="@lru_cache"
            )
        ]
        
        response = AssistantResponse(
            analysis=analysis,
            suggestions=suggestions,
            confidence=0.9
        )
        
        assert response.confidence == 0.9
        assert len(response.suggestions) == 1
        assert response.analysis.complexity == "advanced"