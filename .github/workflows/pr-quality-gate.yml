name: Pull Request Quality Gate

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  quality-checks:
    name: Quality Gate Checks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Check for secrets in code
      run: |
        # Simple check for common secret patterns
        if grep -r -i "api[_-]key\|secret\|password\|token" src/ --include="*.py" | grep -v "# nosec" | grep -v "test"; then
          echo "‚ö†Ô∏è Potential secrets found in code! Please review:"
          grep -r -i "api[_-]key\|secret\|password\|token" src/ --include="*.py" | grep -v "# nosec" | grep -v "test" || true
          exit 1
        fi

    - name: Lint check (blocking)
      run: |
        echo "## üîç Linting Results" >> $GITHUB_STEP_SUMMARY
        if uv run ruff check src/ tests/ --output-format=github; then
          echo "‚úÖ No linting issues found" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Linting issues found - please fix before merging" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Format check (blocking)
      run: |
        echo "## üé® Code Formatting" >> $GITHUB_STEP_SUMMARY
        if uv run ruff format src/ tests/ --check; then
          echo "‚úÖ Code formatting is correct" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Code formatting issues found" >> $GITHUB_STEP_SUMMARY
          echo "Run: \`uv run ruff format src/ tests/\` to fix" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Type check (non-blocking)
      run: |
        echo "## üî§ Type Checking" >> $GITHUB_STEP_SUMMARY
        if uv run mypy src/ --ignore-missing-imports; then
          echo "‚úÖ No type checking issues" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è Type checking issues found (non-blocking)" >> $GITHUB_STEP_SUMMARY
        fi
      continue-on-error: true

    - name: Test coverage check
      run: |
        echo "## üìä Test Coverage" >> $GITHUB_STEP_SUMMARY
        coverage_output=$(uv run pytest tests/ --cov=src --cov-report=term-missing --quiet 2>&1 || true)
        coverage_percent=$(echo "$coverage_output" | grep "TOTAL" | awk '{print $4}' | sed 's/%//' || echo "0")

        echo "Current coverage: ${coverage_percent}%" >> $GITHUB_STEP_SUMMARY

        if [ "${coverage_percent}" -lt 25 ]; then
          echo "‚ùå Coverage too low (${coverage_percent}% < 25%)" >> $GITHUB_STEP_SUMMARY
          echo "Please add tests to improve coverage" >> $GITHUB_STEP_SUMMARY
          exit 1
        elif [ "${coverage_percent}" -lt 40 ]; then
          echo "‚ö†Ô∏è Coverage could be better (${coverage_percent}%)" >> $GITHUB_STEP_SUMMARY
          echo "Consider adding more tests" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚úÖ Good test coverage (${coverage_percent}%)" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Essential features test (blocking)
      run: |
        echo "## üéØ Essential Features Test" >> $GITHUB_STEP_SUMMARY
        if uv run pytest tests/test_essential_features.py -v --tb=short; then
          echo "‚úÖ All essential features working correctly" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Essential features tests failed" >> $GITHUB_STEP_SUMMARY
          echo "Critical user workflows are broken - please fix" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Integration test check (non-blocking)
      run: |
        echo "## üîó Integration Tests" >> $GITHUB_STEP_SUMMARY
        if uv run pytest tests/test_demo_integration.py tests/test_integration_comprehensive.py -v --tb=short; then
          echo "‚úÖ Integration tests passing" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è Some integration tests failing (non-blocking for PR)" >> $GITHUB_STEP_SUMMARY
        fi
      continue-on-error: true

    - name: Build test (blocking)
      run: |
        echo "## üì¶ Package Build" >> $GITHUB_STEP_SUMMARY
        if uv build; then
          echo "‚úÖ Package builds successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Package build failed" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: CLI smoke test (blocking)
      run: |
        echo "## üñ•Ô∏è CLI Functionality" >> $GITHUB_STEP_SUMMARY
        uv pip install dist/*.whl
        if ckc --version && ckc --help > /dev/null; then
          echo "‚úÖ CLI working correctly" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå CLI functionality broken" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Security check with bandit
      run: |
        echo "## üîí Security Scan" >> $GITHUB_STEP_SUMMARY
        if uv run bandit -r src/ -f json -o bandit-report.json; then
          echo "‚úÖ No security issues found" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è Potential security issues detected" >> $GITHUB_STEP_SUMMARY
          echo "Please review bandit report" >> $GITHUB_STEP_SUMMARY
        fi
      continue-on-error: true

    - name: Dependency vulnerability check
      run: |
        if uv run safety check --json --output safety-report.json; then
          echo "‚úÖ No known vulnerabilities in dependencies" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è Potential vulnerabilities in dependencies" >> $GITHUB_STEP_SUMMARY
          echo "Please update affected packages" >> $GITHUB_STEP_SUMMARY
        fi
      continue-on-error: true

  changelog-check:
    name: Changelog Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: Check for changelog update
      run: |
        echo "## üìù Changelog Check" >> $GITHUB_STEP_SUMMARY

        # Check if CHANGELOG.md was modified
        if git diff --name-only origin/main...HEAD | grep -q "CHANGELOG.md"; then
          echo "‚úÖ Changelog updated" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è Consider updating CHANGELOG.md for significant changes" >> $GITHUB_STEP_SUMMARY
          echo "This is not blocking, but helps with release notes" >> $GITHUB_STEP_SUMMARY
        fi

        # Check for breaking changes markers
        if git log --oneline origin/main...HEAD | grep -i "break\|major\|!:"; then
          echo "üö® Potential breaking changes detected" >> $GITHUB_STEP_SUMMARY
          echo "Please ensure this is properly documented" >> $GITHUB_STEP_SUMMARY
        fi

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan, changelog-check]
    if: always() && github.event.pull_request.draft == false

    steps:
    - name: Generate PR Summary
      run: |
        echo "## üìã Pull Request Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.quality-checks.result }}" = "success" ]; then
          echo "‚úÖ **Quality Checks**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Quality Checks**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.security-scan.result }}" = "success" ] || [ "${{ needs.security-scan.result }}" = "skipped" ]; then
          echo "‚úÖ **Security Scan**: No blocking issues" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Security Scan**: Issues found (review recommended)" >> $GITHUB_STEP_SUMMARY
        fi

        echo "‚úÖ **Changelog**: Checked" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.quality-checks.result }}" = "success" ]; then
          echo "üéâ **This PR is ready for review and merge!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "üîß **This PR needs fixes before merging**" >> $GITHUB_STEP_SUMMARY
        fi
