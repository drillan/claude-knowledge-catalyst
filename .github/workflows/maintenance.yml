name: Maintenance and Dependencies

on:
  schedule:
    # Run weekly on Monday at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - all

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  dependency-update:
    name: Update Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Current dependencies snapshot
      run: |
        echo "## 📦 Current Dependencies" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        uv pip list >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Update dependencies
      run: |
        # Update based on input or default to patch updates
        UPDATE_TYPE="${{ github.event.inputs.update_type }}"
        if [ -z "$UPDATE_TYPE" ]; then
          UPDATE_TYPE="patch"
        fi

        echo "Performing $UPDATE_TYPE updates..."

        case "$UPDATE_TYPE" in
          "patch")
            uv sync --upgrade-package "*"
            ;;
          "minor")
            uv sync --upgrade
            ;;
          "all")
            uv sync --upgrade
            ;;
        esac

    - name: Check for updates
      id: check_updates
      run: |
        if git diff --quiet uv.lock; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No dependency updates available" >> $GITHUB_STEP_SUMMARY
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "## 🔄 Dependency Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
          git diff uv.lock | head -50 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Run tests with updated dependencies
      if: steps.check_updates.outputs.changes == 'true'
      run: |
        echo "## 🧪 Testing Updated Dependencies" >> $GITHUB_STEP_SUMMARY

        # Run critical tests to ensure updates don't break functionality
        if uv run pytest tests/test_essential_features.py -v; then
          echo "✅ Essential features tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Essential features tests failed with updated dependencies" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

        if uv run pytest tests/ --maxfail=5 -q; then
          echo "✅ Full test suite passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Some tests failed - manual review needed" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Security audit
      run: |
        echo "## 🔒 Security Audit" >> $GITHUB_STEP_SUMMARY

        # Check for known vulnerabilities
        if uv run safety check --json; then
          echo "✅ No known security vulnerabilities" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Create PR for dependency updates
      if: steps.check_updates.outputs.changes == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Create branch and commit
        BRANCH_NAME="maintenance/dependency-update-$(date +%Y%m%d)"
        git checkout -b "$BRANCH_NAME"
        git add uv.lock
        git commit -m "chore: update dependencies

        - Automated dependency update via GitHub Actions
        - Update type: ${{ github.event.inputs.update_type || 'patch' }}
        - All tests passing

        🤖 Generated by maintenance workflow"

        git push origin "$BRANCH_NAME"

        # Create PR
        gh pr create \
          --title "🔄 Automated Dependency Update ($(date +%Y-%m-%d))" \
          --body "## 📦 Dependency Update

        This is an automated pull request to update project dependencies.

        ### Update Details
        - **Update Type**: ${{ github.event.inputs.update_type || 'patch' }}
        - **Generated**: $(date)
        - **Test Status**: ✅ All critical tests passing

        ### Changes
        - Updated dependency lock file
        - All essential features tested and working

        ### Review Checklist
        - [ ] Review dependency changes
        - [ ] Verify test results
        - [ ] Check for breaking changes
        - [ ] Approve and merge if all looks good

        🤖 This PR was created automatically by GitHub Actions." \
          --label "dependencies" \
          --label "maintenance"

  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest

    steps:
    - name: Cleanup old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifactRetentionDays = 30;
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - artifactRetentionDays);

          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          let deletedCount = 0;
          for (const artifact of artifacts.data.artifacts) {
            const createdAt = new Date(artifact.created_at);
            if (createdAt < cutoffDate) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
              deletedCount++;
            }
          }

          console.log(`Deleted ${deletedCount} old artifacts`);
          core.summary.addRaw(`## 🧹 Artifact Cleanup\n\nDeleted ${deletedCount} artifacts older than ${artifactRetentionDays} days`);
          await core.summary.write();

  health-check:
    name: Project Health Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Project health analysis
      run: |
        echo "## 📊 Project Health Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Test coverage
        uv sync --dev
        coverage_report=$(uv run pytest tests/ --cov=src --cov-report=term-missing --quiet 2>&1 || true)
        coverage_percent=$(echo "$coverage_report" | grep "TOTAL" | awk '{print $4}' | sed 's/%//' || echo "0")
        echo "**Test Coverage**: ${coverage_percent}%" >> $GITHUB_STEP_SUMMARY

        # Lines of code
        total_lines=$(find src/ -name "*.py" -exec wc -l {} + | tail -1 | awk '{print $1}')
        echo "**Total Lines of Code**: $total_lines" >> $GITHUB_STEP_SUMMARY

        # Number of tests
        test_count=$(find tests/ -name "test_*.py" -exec grep -c "def test_" {} + | awk '{sum+=$1} END {print sum}')
        echo "**Number of Tests**: $test_count" >> $GITHUB_STEP_SUMMARY

        # Dependencies count
        dep_count=$(uv pip list | wc -l)
        echo "**Dependencies**: $dep_count packages" >> $GITHUB_STEP_SUMMARY

        # Recent commit activity
        commits_last_week=$(git log --since="1 week ago" --oneline | wc -l)
        echo "**Recent Activity**: $commits_last_week commits in last week" >> $GITHUB_STEP_SUMMARY

        echo "" >> $GITHUB_STEP_SUMMARY

        # Health score calculation
        health_score=0
        if [ "$coverage_percent" -gt 40 ]; then health_score=$((health_score + 25)); fi
        if [ "$test_count" -gt 50 ]; then health_score=$((health_score + 25)); fi
        if [ "$dep_count" -lt 100 ]; then health_score=$((health_score + 25)); fi
        if [ "$commits_last_week" -gt 0 ]; then health_score=$((health_score + 25)); fi

        echo "**Overall Health Score**: $health_score/100" >> $GITHUB_STEP_SUMMARY

        if [ "$health_score" -gt 75 ]; then
          echo "🎉 **Status**: Excellent health!" >> $GITHUB_STEP_SUMMARY
        elif [ "$health_score" -gt 50 ]; then
          echo "👍 **Status**: Good health" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Status**: Needs attention" >> $GITHUB_STEP_SUMMARY
        fi
