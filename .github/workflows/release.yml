name: Release and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Set up Python 3.11
      run: uv python install 3.11
      
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Run full test suite
      run: |
        uv run pytest tests/ --cov=src --cov-fail-under=30
        
    - name: Lint and format check
      run: |
        uv run ruff check src/ tests/
        uv run ruff format src/ tests/ --check
        
    - name: Type check
      run: |
        uv run mypy src/ --ignore-missing-imports
        
    - name: Build package
      run: |
        uv build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-dist
        path: dist/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version from tag
      id: extract_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          # Extract latest version changes (simple approach)
          awk '/^## \[/ { if(NR==1) next; else exit } /^## / { exit } { print }' CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "changelog=Release ${{ steps.extract_version.outputs.version }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.extract_version.outputs.version }}
        release_name: Claude Knowledge Catalyst ${{ steps.extract_version.outputs.version }}
        body: |
          ## Changes in ${{ steps.extract_version.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ### Using pip
          ```bash
          pip install claude-knowledge-catalyst==${{ steps.extract_version.outputs.version }}
          ```
          
          ### Using uv (recommended)
          ```bash
          uv add claude-knowledge-catalyst==${{ steps.extract_version.outputs.version }}
          ```
          
          ## Verification
          ```bash
          ckc --version
          ```
          
          For detailed documentation, visit: https://claude-knowledge-catalyst.readthedocs.io/
        draft: false
        prerelease: ${{ contains(steps.extract_version.outputs.version, '-') }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    environment: pypi
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Set up Python 3.11
      run: uv python install 3.11
      
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Build package
      run: |
        uv build
        
    - name: Verify package
      run: |
        uv run twine check dist/*
        
    - name: Publish to Test PyPI
      if: contains(github.ref, '-')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        uv run twine upload --repository testpypi dist/*
        
    - name: Publish to PyPI
      if: "!contains(github.ref, '-')"
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        uv run twine upload dist/*

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: publish-pypi
    if: "!contains(github.ref, '-')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Set up Python 3.11
      run: uv python install 3.11
      
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Build documentation
      run: |
        cd docs
        uv run sphinx-build -b html . _build/html
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [publish-pypi, update-docs]
    if: success()
    
    steps:
    - name: Extract version
      id: version
      run: |
        echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
    - name: Create success summary
      run: |
        echo "## ðŸŽ‰ Release ${{ steps.version.outputs.version }} Published Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### âœ… Completed Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- Package built and validated" >> $GITHUB_STEP_SUMMARY
        echo "- Released to PyPI" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation updated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Installation:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "uv add claude-knowledge-catalyst==${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY